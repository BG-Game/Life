import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

export const checkAuth = (req, res, next) => {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");

    console.log("üìú –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", req.headers);
    console.log("üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization:", req.headers.authorization);

    const authHeader = req.headers.authorization;
    if (!authHeader) {
        console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)' });
    }

    const token = authHeader.split(" ")[1];
    if (!token) {
        console.log("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω)' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üîë –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decoded);

        if (!decoded.id) {
            console.log("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–æ–∫–µ–Ω–µ");
            return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω)' });
        }

        req.userId = decoded.id;
        console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", req.userId);
        next();
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω", error.message);
        return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)' });
    }
};
