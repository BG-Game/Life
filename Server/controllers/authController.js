import User from '../models/User.js';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import { sendVerificationSMS } from '../utils/smsService.js';
import dotenv from 'dotenv';

dotenv.config();

/**
 * üìå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–µ
 */
export const verifyCode = async (req, res) => {
    try {
        const { phoneNumber, code } = req.body;

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const user = await User.findOne({ phoneNumber });

        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
        if (!user.verificationCode || user.verificationExpires < new Date()) {
            return res.status(400).json({ message: "–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π." });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        if (user.verificationCode !== code) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
        }

        // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        user.isVerified = true;
        user.verificationCode = null;
        user.verificationExpires = null;
        await user.save();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '30d' });

        res.status(200).json({ token, message: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

/**
 * üìå 1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ SMS.ru
 */
export const sendResetCode = async (req, res) => {
    try {
        const { phoneNumber } = req.body;
        console.log("üì© –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞:", phoneNumber);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –≤ –ë–î
        const user = await User.findOne({ phoneNumber });
        if (!user) {
            return res.status(400).json({ message: "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
        console.log(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ ${verificationCode} –¥–ª—è ${phoneNumber}`);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ (5 –º–∏–Ω—É—Ç)
        const expiresAt = new Date(Date.now() + 5 * 60 * 1000);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –∏ —Å—Ä–æ–∫ –≤ `User.js`
        user.verificationCode = verificationCode;
        user.verificationExpires = expiresAt;
        await user.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ `sendVerificationSMS`
        const smsSuccess = await sendVerificationSMS(phoneNumber, verificationCode);
        if (!smsSuccess) {
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS" });
        }

        res.json({ message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" });
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå 2Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
 */
export const verifyResetCode = async (req, res) => {
    try {
        const { phoneNumber, code } = req.body;
        console.log(`üì© –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ ${code} –¥–ª—è ${phoneNumber}`);

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ phoneNumber });
        if (!user) {
            return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞
        if (!user.verificationCode || user.verificationExpires < new Date()) {
            return res.status(400).json({ message: "–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π." });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        if (user.verificationCode !== code) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
        }

        res.json({ message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå 3Ô∏è‚É£ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
 */
export const resetPassword = async (req, res) => {
    try {
        const { phoneNumber, newPassword } = req.body;
        console.log(`üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è ${phoneNumber}`);

        // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º verificationCode
        const user = await User.findOneAndUpdate(
            { phoneNumber },
            { password: hashedPassword, verificationCode: null, verificationExpires: null }, 
            { new: true }
        );

        if (!user) {
            return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω" });
    } catch (error) {
        console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};
