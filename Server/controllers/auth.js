import { Router } from "express"; // –î–æ–±–∞–≤–ª–µ–Ω Router –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import multer from "multer";
import sharp from "sharp";
import fs from "fs";
import path from "path";
import User from "../models/User.js";
import { sendVerificationSMS } from "../utils/smsService.js";
import { checkAuth } from "../utils/checkAuth.js"; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

const router = Router(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–æ—É—Ç–µ—Ä–∞

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const register = async (req, res) => {
    try {
        const { fullName, username, phoneNumber, password } = req.body;

        console.log("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", req.body);

        const existingUser = await User.findOne({ $or: [{ username }, { phoneNumber }] });
        if (existingUser) {
            return res.status(400).json({ message: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç—ã" });
        }

        const salt = bcrypt.genSaltSync(10);
        const hash = bcrypt.hashSync(password, salt);

        const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();

        const newUser = new User({
            fullName,
            username,
            phoneNumber,
            password: hash,
            verificationCode,
            isVerified: false,
            avatarUrl: "",
        });

        await newUser.save();
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", newUser);

        const smsSent = await sendVerificationSMS(phoneNumber, verificationCode);
        if (!smsSent) {
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS" });
        }

        res.status(200).json({ message: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", error: error.message });
    }
};

// üîπ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const login = async (req, res) => {
    try {
        console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:", req.body);

        const { username, password } = req.body;
        console.log("–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å username:", username);

        const user = await User.findOne({ username: new RegExp(`^${username}$`, "i") });

        if (!user) {
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!");
            return res.status(400).json({ message: "–¢–∞–∫–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç." });
        }

        console.log("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);

        if (!user.isVerified) {
            return res.status(403).json({ message: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS." });
        }

        const isPasswordCorrect = await bcrypt.compare(password, user.password);
        if (!isPasswordCorrect) {
            console.log("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." });
        }

        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "30d" });

        res.json({ token, user, message: "–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É." });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", error: error.message });
    }
};

// üîπ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export const getMe = async (req, res) => {
    try {
        const user = await User.findById(req.userId).select("fullName username avatarUrl");

        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(user);
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// üîπ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const verifyCode = async (req, res) => {
    try {
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:", req.body);

        const { phoneNumber, code } = req.body;
        console.log("–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", phoneNumber);

        const user = await User.findOne({ phoneNumber });

        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        if (user.verificationCode !== code) {
            return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
        }

        await User.updateOne({ phoneNumber }, { $set: { isVerified: true, verificationCode: null } });

        const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "30d" });

        res.status(200).json({ token, message: "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞", error: error.message });
    }
};

// üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, "uploads/avatars/");
    },
    filename: (req, file, cb) => {
        const fileExt = file.originalname.split(".").pop();
        cb(null, `${Date.now()}-avatar.${fileExt}`);
    }
});

// üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–∞ (13MB)
const fileFilter = (req, file, cb) => {
    const allowedTypes = ["image/jpeg", "image/png", "image/webp"];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPG, PNG, WEBP"), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: { fileSize: 13 * 1024 * 1024 }
});

// üîπ API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
const uploadAvatar = async (req, res) => {
    try {
        console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞");
        console.log("–§–∞–π–ª:", req.file); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        console.log("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:", req.body); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ

        const userId = req.userId;

        if (!req.file) {
            return res.status(400).json({ message: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω" });
        }

        const tempPath = req.file.path;
        const outputPath = `uploads/avatars/${Date.now()}-compressed.webp`;

        await sharp(tempPath)
            .resize(512, 512)
            .toFormat("webp")
            .toFile(outputPath);

            await sharp(tempPath)
            .resize(512, 512)
            .toFormat("webp")
            .toFile(outputPath)
            .then(() => fs.unlinkSync(tempPath)) // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            .catch((err) => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:", err));
        

        const avatarUrl = `/${outputPath}`;

        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { avatarUrl },
            { new: true }
        );
        
        console.log("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä URL:", updatedUser.avatarUrl);
        

        if (!updatedUser) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json({ avatarUrl });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};



// üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
router.post("/upload-avatar", checkAuth, upload.single("avatar"), uploadAvatar);

export { uploadAvatar };
